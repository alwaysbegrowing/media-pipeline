Resources:
  IndividualClips96D9129C:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Id: 30-Day-Retention
            Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: RenderLambdaStack/IndividualClips/Resource
  IndividualClipsPolicyAD45D984:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: IndividualClips96D9129C
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal: "*"
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - IndividualClips96D9129C
                      - Arn
                  - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: RenderLambdaStack/IndividualClips/Policy/Resource
  clipapi7DD8DA51:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Service handles combining clips
      Name: Clips service
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Resource
  clipapiCloudWatchRole1056C53A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/CloudWatchRole/Resource
  clipapiAccountFEFA9648:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - clipapiCloudWatchRole1056C53A
          - Arn
    DependsOn:
      - clipapi7DD8DA51
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Account
  clipapiDeploymentE3524B3D5eebee895dd644ee02c0f34f4581abcd:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: clipapi7DD8DA51
      Description: Automatically created by the RestApi construct
    DependsOn:
      - clipapiclipsOPTIONS8D8CC9B6
      - clipapiclipsPOST3A3D8B87
      - clipapiclips86AE1BB1
      - clipapiOPTIONSDE740D60
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Deployment/Resource
  clipapiDeploymentStageprodECE8F136:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: clipapi7DD8DA51
      DeploymentId:
        Ref: clipapiDeploymentE3524B3D5eebee895dd644ee02c0f34f4581abcd
      StageName: prod
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/DeploymentStage.prod/Resource
  clipapiOPTIONSDE740D60:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
          - clipapi7DD8DA51
          - RootResourceId
      RestApiId:
        Ref: clipapi7DD8DA51
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Default/OPTIONS/Resource
  clipapiclips86AE1BB1:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - clipapi7DD8DA51
          - RootResourceId
      PathPart: clips
      RestApiId:
        Ref: clipapi7DD8DA51
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Default/clips/Resource
  clipapiclipsOPTIONS8D8CC9B6:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: clipapiclips86AE1BB1
      RestApiId:
        Ref: clipapi7DD8DA51
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Default/clips/OPTIONS/Resource
  clipapiclipsPOSTApiPermissionRenderLambdaStackclipapi300D2810POSTclipsB1E17A5C:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ClipQueuer58A9C9FE
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:us-east-1:576758376358:"
            - Ref: clipapi7DD8DA51
            - /
            - Ref: clipapiDeploymentStageprodECE8F136
            - /POST/clips
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Default/clips/POST/ApiPermission.RenderLambdaStackclipapi300D2810.POST..clips
  clipapiclipsPOSTApiPermissionTestRenderLambdaStackclipapi300D2810POSTclips3947204A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ClipQueuer58A9C9FE
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:us-east-1:576758376358:"
            - Ref: clipapi7DD8DA51
            - /test-invoke-stage/POST/clips
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Default/clips/POST/ApiPermission.Test.RenderLambdaStackclipapi300D2810.POST..clips
  clipapiclipsPOST3A3D8B87:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: clipapiclips86AE1BB1
      RestApiId:
        Ref: clipapi7DD8DA51
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        RequestTemplates:
          application/json: '{ "statusCode": "200" }'
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :apigateway:us-east-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - ClipQueuer58A9C9FE
                  - Arn
              - /invocations
    Metadata:
      aws:cdk:path: RenderLambdaStack/clip-api/Default/clips/POST/Resource
  ClipQueuerServiceRole860A233D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RenderLambdaStack/ClipQueuer/ServiceRole/Resource
  ClipQueuerServiceRoleDefaultPolicy480FAA05:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: RendererE9DA6252
        Version: "2012-10-17"
      PolicyName: ClipQueuerServiceRoleDefaultPolicy480FAA05
      Roles:
        - Ref: ClipQueuerServiceRole860A233D
    Metadata:
      aws:cdk:path: RenderLambdaStack/ClipQueuer/ServiceRole/DefaultPolicy/Resource
  ClipQueuer58A9C9FE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-576758376358-us-east-1
        S3Key: 57da22d3dc7d46125f517edcb1e48342af47eae2cd2b33d51b02320e7be14c66.zip
      Role:
        Fn::GetAtt:
          - ClipQueuerServiceRole860A233D
          - Arn
      Description: REST API Clip Processor Lambda
      Environment:
        Variables:
          BUCKET:
            Ref: IndividualClips96D9129C
          STEPFUNCTION_ARN:
            Ref: RendererE9DA6252
      Handler: handler.handler
      MemorySize: 256
      Runtime: python3.8
      Timeout: 60
    DependsOn:
      - ClipQueuerServiceRoleDefaultPolicy480FAA05
      - ClipQueuerServiceRole860A233D
    Metadata:
      aws:cdk:path: RenderLambdaStack/ClipQueuer/Resource
      aws:asset:path: /home/chandler/Documents/pillar/render-lambda/cdk.out/asset.57da22d3dc7d46125f517edcb1e48342af47eae2cd2b33d51b02320e7be14c66
      aws:asset:property: Code
  ClipDownloaderServiceRole70A302B9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RenderLambdaStack/ClipDownloader/ServiceRole/Resource
  ClipDownloaderServiceRoleDefaultPolicy28DFB31B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:PutObject
              - s3:Abort*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - IndividualClips96D9129C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - IndividualClips96D9129C
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: ClipDownloaderServiceRoleDefaultPolicy28DFB31B
      Roles:
        - Ref: ClipDownloaderServiceRole70A302B9
    Metadata:
      aws:cdk:path: RenderLambdaStack/ClipDownloader/ServiceRole/DefaultPolicy/Resource
  ClipDownloader3E3BE2D9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Sub: 576758376358.dkr.ecr.us-east-1.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-576758376358-us-east-1:d69d70e60e4e751fffb9227e3711184c44f0927f45638ec2ba22696c20ad9dbf
      Role:
        Fn::GetAtt:
          - ClipDownloaderServiceRole70A302B9
          - Arn
      Description: Containerized Clip Downloader
      Environment:
        Variables:
          BUCKET:
            Ref: IndividualClips96D9129C
      MemorySize: 512
      PackageType: Image
      Timeout: 60
    DependsOn:
      - ClipDownloaderServiceRoleDefaultPolicy28DFB31B
      - ClipDownloaderServiceRole70A302B9
    Metadata:
      aws:cdk:path: RenderLambdaStack/ClipDownloader/Resource
  CombinedClips9275AE0A:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Id: 30-Day-Retention
            Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: RenderLambdaStack/CombinedClips/Resource
  CombinedClipsNotifications50F7C73D:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: CombinedClips9275AE0A
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - Notify29C25B1B
                - Arn
    DependsOn:
      - CombinedClipsAllowBucketNotificationsToRenderLambdaStackNotify5C6DB0C035CCA184
    Metadata:
      aws:cdk:path: RenderLambdaStack/CombinedClips/Notifications/Resource
  CombinedClipsPolicyB8E2010E:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CombinedClips9275AE0A
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal: "*"
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - CombinedClips9275AE0A
                      - Arn
                  - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: RenderLambdaStack/CombinedClips/Policy/Resource
  CombinedClipsAllowBucketNotificationsToRenderLambdaStackNotify5C6DB0C035CCA184:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Notify29C25B1B
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount: "576758376358"
      SourceArn:
        Fn::GetAtt:
          - CombinedClips9275AE0A
          - Arn
    Metadata:
      aws:cdk:path: RenderLambdaStack/CombinedClips/AllowBucketNotificationsToRenderLambdaStackNotify5C6DB0C0
  ClipCombiner:
    Type: AWS::MediaConvert::Queue
    Metadata:
      aws:cdk:path: RenderLambdaStack/ClipCombiner
  MediaConvert6D0D3F90:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: mediaconvert.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: RenderLambdaStack/MediaConvert/Resource
  MediaConvertDefaultPolicyDA2B78D9:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - IndividualClips96D9129C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - IndividualClips96D9129C
                        - Arn
                    - /*
          - Action:
              - s3:DeleteObject*
              - s3:PutObject
              - s3:Abort*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - CombinedClips9275AE0A
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CombinedClips9275AE0A
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: MediaConvertDefaultPolicyDA2B78D9
      Roles:
        - Ref: MediaConvert6D0D3F90
    Metadata:
      aws:cdk:path: RenderLambdaStack/MediaConvert/DefaultPolicy/Resource
  FinalRendererServiceRoleFB621397:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RenderLambdaStack/FinalRenderer/ServiceRole/Resource
  FinalRendererServiceRoleDefaultPolicyAA582D6E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: mediaconvert:CreateJob
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ClipCombiner
                - Arn
          - Action:
              - iam:PassRole
              - iam:ListRoles
            Effect: Allow
            Resource: arn:aws:iam::*:role/*
        Version: "2012-10-17"
      PolicyName: FinalRendererServiceRoleDefaultPolicyAA582D6E
      Roles:
        - Ref: FinalRendererServiceRoleFB621397
    Metadata:
      aws:cdk:path: RenderLambdaStack/FinalRenderer/ServiceRole/DefaultPolicy/Resource
  FinalRendererCB91BC08:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-576758376358-us-east-1
        S3Key: 7493ae6843f6ea225b2ba40c73fc484bbf4c4d513a7efcd156eb1b6064af3bca.zip
      Role:
        Fn::GetAtt:
          - FinalRendererServiceRoleFB621397
          - Arn
      Description: MediaConvert job queuer
      Environment:
        Variables:
          IN_BUCKET:
            Ref: IndividualClips96D9129C
          OUT_BUCKET:
            Ref: CombinedClips9275AE0A
          QUEUE_ARN:
            Fn::GetAtt:
              - ClipCombiner
              - Arn
          QUEUE_ROLE:
            Fn::GetAtt:
              - MediaConvert6D0D3F90
              - Arn
      Handler: handler.handler
      MemorySize: 128
      Runtime: python3.8
    DependsOn:
      - FinalRendererServiceRoleDefaultPolicyAA582D6E
      - FinalRendererServiceRoleFB621397
    Metadata:
      aws:cdk:path: RenderLambdaStack/FinalRenderer/Resource
      aws:asset:path: /home/chandler/Documents/pillar/render-lambda/cdk.out/asset.7493ae6843f6ea225b2ba40c73fc484bbf4c4d513a7efcd156eb1b6064af3bca
      aws:asset:property: Code
  NotifyServiceRole5B74FDA4:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RenderLambdaStack/Notify/ServiceRole/Resource
  NotifyServiceRoleDefaultPolicy29A5A742:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource: arn:aws:secretsmanager:us-east-1:576758376358:secret:MONGODB-6SPDyv
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource: arn:aws:secretsmanager:us-east-1:576758376358:secret:TWITCH_SECRET-xylhKu
          - Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: NotifyServiceRoleDefaultPolicy29A5A742
      Roles:
        - Ref: NotifyServiceRole5B74FDA4
    Metadata:
      aws:cdk:path: RenderLambdaStack/Notify/ServiceRole/DefaultPolicy/Resource
  Notify29C25B1B:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-576758376358-us-east-1
        S3Key: b9ca04cc19f2ba0d2049fbd74986def03d189b1732cafba7e6c5c3d4603d9257.zip
      Role:
        Fn::GetAtt:
          - NotifyServiceRole5B74FDA4
          - Arn
      Description: SES Email Lambda
      Environment:
        Variables:
          COMBINED_BUCKET_DNS:
            Fn::GetAtt:
              - CombinedClips9275AE0A
              - DomainName
          INDIVIDUAL_BUCKET_DNS:
            Fn::GetAtt:
              - IndividualClips96D9129C
              - DomainName
          DB_NAME: dev
          FROM_EMAIL: steven@pillar.gg
          TWITCH_CLIENT_ID: 2nakqoqdxka9v5oekyo6742bmnxt2o
          TWITCH_CLIENT_SECRET_ARN: arn:aws:secretsmanager:us-east-1:576758376358:secret:TWITCH_SECRET-xylhKu
          MONGODB_URI_SECRET_ARN: arn:aws:secretsmanager:us-east-1:576758376358:secret:MONGODB-6SPDyv
      Handler: handler.handler
      MemorySize: 256
      Runtime: python3.8
      Timeout: 60
    DependsOn:
      - NotifyServiceRoleDefaultPolicy29A5A742
      - NotifyServiceRole5B74FDA4
    Metadata:
      aws:cdk:path: RenderLambdaStack/Notify/Resource
      aws:asset:path: /home/chandler/Documents/pillar/render-lambda/cdk.out/asset.b9ca04cc19f2ba0d2049fbd74986def03d189b1732cafba7e6c5c3d4603d9257
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RenderLambdaStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: RenderLambdaStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |-
          exports.handler = (event, context) => {
              // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
              const s3 = new (require('aws-sdk').S3)();
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const https = require('https');
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const url = require('url');
              log(JSON.stringify(event, undefined, 2));
              const props = event.ResourceProperties;
              if (event.RequestType === 'Delete') {
                  props.NotificationConfiguration = {}; // this is how you clean out notifications
              }
              const req = {
                  Bucket: props.BucketName,
                  NotificationConfiguration: props.NotificationConfiguration,
              };
              return s3.putBucketNotificationConfiguration(req, (err, data) => {
                  log({ err, data });
                  if (err) {
                      return submitResponse('FAILED', err.message + `\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);
                  }
                  else {
                      return submitResponse('SUCCESS');
                  }
              });
              function log(obj) {
                  console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
              }
              // eslint-disable-next-line max-len
              // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              // to allow sending an error message as a reason.
              function submitResponse(responseStatus, reason) {
                  const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                      PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      NoEcho: false,
                  });
                  log({ responseBody });
                  const parsedUrl = url.parse(event.ResponseURL);
                  const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: 'PUT',
                      headers: {
                          'content-type': '',
                          'content-length': responseBody.length,
                      },
                  };
                  const request = https.request(options, (r) => {
                      log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
                      context.done();
                  });
                  request.on('error', (error) => {
                      log({ sendError: error });
                      context.done();
                  });
                  request.write(responseBody);
                  request.end();
              }
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: nodejs12.x
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: RenderLambdaStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  RendererRole4A084C2E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.us-east-1.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: RenderLambdaStack/Renderer/Role/Resource
  RendererRoleDefaultPolicy74B3D00C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - Notify29C25B1B
                - Arn
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - FinalRendererCB91BC08
                - Arn
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ClipDownloader3E3BE2D9
                - Arn
        Version: "2012-10-17"
      PolicyName: RendererRoleDefaultPolicy74B3D00C
      Roles:
        - Ref: RendererRole4A084C2E
    Metadata:
      aws:cdk:path: RenderLambdaStack/Renderer/Role/DefaultPolicy/Resource
  RendererE9DA6252:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - RendererRole4A084C2E
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"Process Clips","States":{"Process Clips":{"Type":"Map","Next":"Render?","InputPath":"$.clips","Iterator":{"StartAt":"Download Clip","States":{"Download Clip":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - ClipDownloader3E3BE2D9
                - Arn
            - '","Payload.$":"$"}}}}},"Render?":{"Type":"Choice","Choices":[{"Variable":"$[0].Payload.render","BooleanEquals":false,"Next":"Send notification"},{"Variable":"$[0].Payload.render","BooleanEquals":true,"Next":"Render Video"}]},"Send notification":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - Notify29C25B1B
                - Arn
            - '","Payload.$":"$"}},"Render Video":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - FinalRendererCB91BC08
                - Arn
            - '","Payload.$":"$"}}}}'
    DependsOn:
      - RendererRoleDefaultPolicy74B3D00C
      - RendererRole4A084C2E
    Metadata:
      aws:cdk:path: RenderLambdaStack/Renderer/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAAA21R227CMAz9Ft7TAEKatLdx0SSkoTH4gsz1IGubRLEDqqr++5KWwDTtyceXHB+fzOV8NpezyYu6UgFlNe3AepTdkRVUYm0NsQ/AYv1l3gO7wGJJhBzbJ21O4oBkgwdM/Yx7kbg6WshuFaDC4fENjWFvaw3tozzm8Z3TJ8V4Va3sIhsvnb4RZ7gEsMGw2KCrbdugGch/ZUnYoGYEWdNKEYod8tmWqXlD/6vXqonrbT2WU3zozUpr1XyWSnaphL7RRNqaNPAaDHDCGeTZwrVxp5H7IdzHaFGoZCjJwVeB4HNhY6M3ftvEO+49eUBnSbP17XBSg6VWYM0FPcu4/iNgQEGM7uu2gQpWVJF8G1RszcVWfwZkt1NOHAMAYnTnbHV0JNrHuFNw1ibbec/7vhfjGdOFfJZPk2/SuvDxX3SD8jDGH/46EjtZAgAA
    Metadata:
      aws:cdk:path: RenderLambdaStack/CDKMetadata/Default
Outputs:
  clipapiEndpoint3F130996:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: clipapi7DD8DA51
          - .execute-api.us-east-1.
          - Ref: AWS::URLSuffix
          - /
          - Ref: clipapiDeploymentStageprodECE8F136
          - /
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store.
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 4 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

